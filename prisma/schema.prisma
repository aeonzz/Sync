// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String        @id @default(uuid())
  studentId                Int           @unique
  email                    String        @unique
  username                 String?       @unique
  password                 String
  avatarUrl                String?
  coverUrl                 String        @default("https://jolfgowviyxdrvtelayh.supabase.co/storage/v1/object/public/static%20images/26993850_369183360223308_167538467966553831_n.png")
  bio                      String?       @db.Text
  onboarded                Boolean       @default(false)
  createdAt                DateTime      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime      @updatedAt @db.Timestamp(6)
  resetPasswordToken       String?       @unique
  resetPasswordTokenExpiry DateTime?
  post                     Post[]
  studentData              StudentData   @relation(fields: [studentId], references: [studentId])
  comment                  Comment[]
  postLike                 PostLike[]
  commentLike              CommentLike[]
}

model Post {
  postId     String     @id @default(uuid())
  sequenceId Int        @default(autoincrement())
  title      String?
  content    String
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @updatedAt @db.Timestamp(6)
  deleted    Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  imageUrls  Image[]
  comment    Comment[]
  postLike   PostLike[]
}

model Comment {
  id          Int           @id @default(autoincrement())
  text        String
  postId      String
  post        Post          @relation(fields: [postId], references: [postId])
  parentId    Int?
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @updatedAt @db.Timestamp(6)
  replies     Comment[]     @relation("CommentReplies")
  parent      Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  deleted     Boolean       @default(false)
  commentLike CommentLike[]
}

model Image {
  id          Int     @id @default(autoincrement())
  url         String? @db.VarChar(255)
  blurDataUrl String  @db.VarChar(255)
  postId      String
  post        Post    @relation(fields: [postId], references: [postId])
}

model StudentData {
  id         Int      @id @default(autoincrement())
  studentId  Int      @unique
  firstName  String
  middleName String
  lastName   String
  yearLevel  String
  department String
  hasAccount Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @db.Timestamp(6)
  user       User?
}

model Banner {
  id        Int      @id @default(autoincrement())
  bannerUrl String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model PostLike {
  id     Int    @id @default(autoincrement())
  userId String
  post   Post   @relation(fields: [postId], references: [postId])
  postId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

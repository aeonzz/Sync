// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(uuid())
  studentId                Int               @unique
  email                    String            @unique
  username                 String?           @unique
  password                 String
  avatarUrl                String?
  coverUrl                 String            @default("https://jolfgowviyxdrvtelayh.supabase.co/storage/v1/object/public/static%20images/26993850_369183360223308_167538467966553831_n.png")
  bio                      String?           @db.Text
  onboarded                Boolean           @default(false)
  createdAt                DateTime          @default(now()) @db.Timestamp(6)
  updatedAt                DateTime          @updatedAt @db.Timestamp(6)
  resetPasswordToken       String?           @unique
  resetPasswordTokenExpiry DateTime?
  post                     Post[]
  studentData              StudentData       @relation(fields: [studentId], references: [studentId])
  comment                  Comment[]
  postLike                 PostLike[]
  commentLike              CommentLike[]
  followers                Follows[]         @relation("followsMeList")
  following                Follows[]         @relation("iFollowList")
  Notification             Notification[]
  Message                  Message[]
  ChannelMember            ChannelMember[]
  MessageReaction          MessageReaction[]
  organizedEvents          Event[]           @relation("OrganizedEvents")
  attendedEvents           Event[]           @relation("EventAttendees")
}

model Follows {
  id          Int    @id @default(autoincrement())
  followerId  String
  followingId String

  follower  User @relation(name: "followsMeList", fields: [followerId], references: [id])
  following User @relation(name: "iFollowList", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Notification {
  id          Int              @id @default(autoincrement())
  text        String
  recipientId String
  type        NotificationType
  from        User             @relation(fields: [fromId], references: [id])
  fromId      String
  resourceId  String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  date        DateTime
  location    String
  organizer   User     @relation(fields: [organizerId], references: [id], name: "OrganizedEvents")
  organizerId String
  attendees   User[]   @relation("EventAttendees")
}

model Post {
  postId     String     @id @default(uuid())
  sequenceId Int        @default(autoincrement())
  title      String?
  content    String
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @updatedAt @db.Timestamp(6)
  deleted    Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  imageUrls  Image[]
  comment    Comment[]
  postLike   PostLike[]
}

model Comment {
  id          String        @id @default(uuid())
  sequenceId  Int           @default(autoincrement())
  text        String
  postId      String
  post        Post          @relation(fields: [postId], references: [postId])
  parentId    String?
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @updatedAt @db.Timestamp(6)
  replies     Comment[]     @relation("CommentReplies")
  parent      Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  deleted     Boolean       @default(false)
  commentLike CommentLike[]
}

model Image {
  id          Int     @id @default(autoincrement())
  url         String? @db.VarChar(255)
  blurDataUrl String  @db.VarChar(255)
  postId      String
  post        Post    @relation(fields: [postId], references: [postId])
}

model StudentData {
  id         Int      @id @default(autoincrement())
  studentId  Int      @unique
  firstName  String
  middleName String
  lastName   String
  yearLevel  String
  department String
  hasAccount Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @db.Timestamp(6)
  user       User?
}

model Banner {
  id        Int      @id @default(autoincrement())
  bannerUrl String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model PostLike {
  id     Int    @id @default(autoincrement())
  userId String
  post   Post   @relation(fields: [postId], references: [postId])
  postId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model Room {
  id        String    @id @default(uuid())
  roomName  String
  createdAt DateTime  @default(now())
  channels  Channel[]
}

model Channel {
  id          String          @id @default(uuid())
  type        ChannelType
  channelName String?
  status      ChannelStatus   @default(PENDING)
  createdAt   DateTime        @default(now()) @db.Timestamp(6)
  updatedAt   DateTime        @updatedAt @db.Timestamp(6)
  messages    Message[]
  members     ChannelMember[]
  room        Room?           @relation(fields: [roomId], references: [id])
  roomId      String?
}

model ChannelMember {
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
}

model Message {
  id              String            @id @default(uuid())
  sequenceId      Int               @default(autoincrement())
  channel         Channel           @relation(fields: [channelId], references: [id])
  sender          User              @relation(fields: [senderId], references: [id])
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  updatedAt       DateTime          @updatedAt @db.Timestamp(6)
  deleted         Boolean           @default(false)
  senderId        String
  channelId       String
  text            String
  messageReaction MessageReaction[]
  parentId        String?
  replies         Message[]         @relation("MessageReplies")
  parent          Message?          @relation("MessageReplies", fields: [parentId], references: [id])
}

model MessageReaction {
  id        String   @id @default(uuid())
  reaction  String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  messageId String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum NotificationType {
  COMMENT
  POST
  LIKE
  FOLLOW
}

enum ChannelType {
  PRIVATE
  GROUP
}

enum ChannelStatus {
  PENDING
  ACCEPTED
  DECLINED
}
